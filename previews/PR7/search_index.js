var documenterSearchIndex = {"docs":
[{"location":"examples/Meshing/#Meshing-Example","page":"Meshing Example","title":"Meshing Example","text":"","category":"section"},{"location":"examples/Meshing/","page":"Meshing Example","title":"Meshing Example","text":"This example demonstrate the use of the 3D viewer and its interaction with other UI controls.","category":"page"},{"location":"examples/Meshing/","page":"Meshing Example","title":"Meshing Example","text":"(Image: Controls Example)","category":"page"},{"location":"overview/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"overview/#Application-Structure","page":"Overview","title":"Application Structure","text":"","category":"section"},{"location":"overview/","page":"Overview","title":"Overview","text":"A Glimmer application usually contains:","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"Variables - Each variable contains a unique name, a type, and a value. The value of a variable can be changed on the Julia side or on the UI side (using the UI controls). Each variable can be connected to a function that will be called whenever the value is set, either by the UI or Julia.","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"UI Controls - A tree structure that defines the user interface. This structure can contain UI controls such as labels, fields, sliders, buttons etc., and also some components to help layout the controls in different ways, such as containers, expansion panels, tabs etc.\nRendering Function - A function that will be called every time any of the application variables value is set. This is a convenient way to take into account all the variables values without connecting each one to a separate event handler.","category":"page"},{"location":"overview/#Example","page":"Overview","title":"Example","text":"","category":"section"},{"location":"overview/","page":"Overview","title":"Overview","text":"Let's take a look at the Images example in Glimmer package. This example shows how to display an image created using the Images package, and allow the user to manipulate controls that will update the image. You can run the example using:","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"julia> Glimmer.runExample(\"Images\")","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"(Image: Glimmer Example)","category":"page"},{"location":"overview/#Initilazation","page":"Overview","title":"Initilazation","text":"","category":"section"},{"location":"overview/","page":"Overview","title":"Overview","text":"Creating an App object and setting general properties such as the application title and initial window size.","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"using Glimmer, Glimmer.FlexUI\nusing Images, ImageSegmentation\n\napp = App()\nprop!(app, :title, \"Glimmer Example - Images\")\nprop!(app, :winInitWidth, 1200)\nprop!(app, :winInitHeight, 800)","category":"page"},{"location":"overview/#Defining-the-variables","page":"Overview","title":"Defining the variables","text":"","category":"section"},{"location":"overview/","page":"Overview","title":"Overview","text":"# image file name\nfilename = addVariable!(app, Variable(name=\"filename\", type=\"string\", value=\"C:/t/TestImages/horse.jpg\"))\n# size of segments\nsize = addVariable!(app, Variable(name=\"size\", type=\"int\", value=10))\n# contains the result of the segmentation \ndetails = addVariable!(app, Variable(name=\"details\", type=\"string\", value=10))\n# source and destination images\nsrc_image = addVariable!(app, Variable(name=\"src_image\", type=\"image\", value=\"\"))\ndst_image = addVariable!(app, Variable(name=\"dst_image\", type=\"image\", value=\"\"))","category":"page"},{"location":"overview/#Defining-the-UI","page":"Overview","title":"Defining the UI","text":"","category":"section"},{"location":"overview/","page":"Overview","title":"Overview","text":"ui = VContainer(\n    H1Label(\"Segmantation Example\"),                # Label\n    HContainer(\n        Button(                                     # Load Button\n            text=\"Load a file\",\n            fileTypes=\".png,.jpg\",\n            variable=\"filename\",\n        ),  \n        Label(text=\"Current file [\\$(filename)]\"),  # Label showing the current file name\n    ),\n    Container(\n        direction = \"row warp\",\n        align = \"space-between center\",\n        children = [\n            Slider(                                 # Slider to control the segments size\n                text=\"Segments Size\",\n                trailing_text=\"[\\$()]\",             # slider's label can contain a default \n                                                    # variable interpolation for its current value $()\n                min=2,\n                max=100,\n                value=8,\n                variable=\"size\"\n            ),  \n            Label(text=\"\\$(details)\"),              # label showing the segmentation details\n                                                    # using the variable interpolation $(details)\n        ],\n    ),\n    H1Label(\"Image Viewer allowing Pan (left-drag) and Zoom (wheel)\"),\n    PanZoom(\n        style=\"width: 100%; height: 60vh;  border: 1px solid black;\",\n        content = Container(\n            direction = \"row\",\n            children = [\n                Card(\n                    title=\"Source Image\",\n                    # style=card_style, \n                    content=VContainer(\n                        Image(                      # Source Image       \n                            source=\"\\$(src_image)\",\n                        ),        \n                    ),              \n                ),\n                Card(\n                    title=\"Segmented Image\",\n                    # style=card_style, \n                    content=VContainer(\n                        Image(                      # Segmented Image\n                            source=\"\\$(dst_image)\",\n                        ),        \n                    ),              \n                ),\n            ]\n        ),\n    ),        \n    \n    Glimmer.exampleSourceAsCard(@__FILE__),         # add the source code as the last control\n)\n# set the controls for the application\ncontrols!(app, ui)","category":"page"},{"location":"overview/#The-Rendering-Function-and-others","page":"Overview","title":"The Rendering Function and others","text":"","category":"section"},{"location":"overview/","page":"Overview","title":"Overview","text":"# utility function to load the current image from disk\nfunction loadImage()\n    @info \"Loading Image [$(filename[])]\"\n    global src_img = load(filename[])\n    src_image[\"png\"] = src_img\nend\n\n# define an event that will trigger when the vriable \"filename\" is changed\n# this function is connected to the variable \"filename\" we defined above\non(filename) do val\n    loadImage()\nend\n\n# the render function will be caulled when any of the UI controls changes value\nsrc_img = nothing           \nfunction processImages()\n    global src_img\n\n    # performing the segmentation using the variable value size (\"size[]\")\n    segments = felzenszwalb(src_img, size[])\n    dst_img = map(i->segment_mean(segments,i), labels_map(segments))\n    \n    # updating the segmented image and the segmentation details variables\n    dst_image[\"png\"] = dst_img\n    details[] = \"$segments\"\nend\n\n# defining the rendering function that will be called every time a variable's value is updated\nfunction render()\n    processImages();\nend\nrenderFunction!(app, render)","category":"page"},{"location":"overview/#Running-the-Application","page":"Overview","title":"Running the Application","text":"","category":"section"},{"location":"overview/","page":"Overview","title":"Overview","text":"# load the initial image and Run the application\nloadImage()\nrun(app)","category":"page"},{"location":"ref/#Complete-Reference","page":"Reference","title":"Complete Reference","text":"","category":"section"},{"location":"ref/#Glimmer","page":"Reference","title":"Glimmer","text":"","category":"section"},{"location":"ref/","page":"Reference","title":"Reference","text":"Modules = [Glimmer]","category":"page"},{"location":"ref/#Glimmer.examplesFolder-Tuple{}","page":"Reference","title":"Glimmer.examplesFolder","text":"examplesFolder()\n\nreturn the examples folder (~/examples) for this package.\n\n\n\n\n\n","category":"method"},{"location":"ref/#Glimmer.examplesList-Tuple{}","page":"Reference","title":"Glimmer.examplesList","text":"examplesList()\n\nDisplay a list of avalable examples.\n\n\n\n\n\n","category":"method"},{"location":"ref/#Glimmer.rootFolder-Tuple{}","page":"Reference","title":"Glimmer.rootFolder","text":"rootFolder()\n\nreturn the root folder for this package.\n\n\n\n\n\n","category":"method"},{"location":"ref/#Glimmer.runExample-Tuple{String}","page":"Reference","title":"Glimmer.runExample","text":"runExample(example::String)\n\nRun the specific example. [example] is given without extension. For example, if we have an example file named \"Controls.jl\" the command to run it is: Glimmer.runExample(\"Controls\")\n\n\n\n\n\n","category":"method"},{"location":"ref/#UIControls-(Glimmer.UIControls])","page":"Reference","title":"UIControls (Glimmer.UIControls])","text":"","category":"section"},{"location":"ref/","page":"Reference","title":"Reference","text":"Modules = [Glimmer.UIControls]","category":"page"},{"location":"ref/#Glimmer.UIControls.Slider","page":"Reference","title":"Glimmer.UIControls.Slider","text":"Slider Control\n\nCreate a slider control.\n\n    text::String = \"\"                   # text to apear to the left of the slider\n    trailing_text::String = \"\"          # text to apear to the right of the slider\n    min::Float64 = 0.0                  # minimum value\n    max::Float64 = 100.0                # maximum value\n    value::Float64 = 0                  # starting value (unused if connected to a variable)\n    step::Float64 = 1.0                 # tick change value\n    variable::Any = nothing             # variable\n\n\n\n\n\n","category":"type"},{"location":"ref/#FlexUI-(Glimmer.FlexUI)","page":"Reference","title":"FlexUI (Glimmer.FlexUI)","text":"","category":"section"},{"location":"ref/","page":"Reference","title":"Reference","text":"Modules = [Glimmer.FlexUI]","category":"page"},{"location":"ref/#Glimmer.FlexUI.forceUpdateControls!-Tuple{App}","page":"Reference","title":"Glimmer.FlexUI.forceUpdateControls!","text":"forceUpdateControls!(app::App)\n\nForce an update of controls that are not updated during the normal execution of an application. Currently, RawHTML is the only     component that behaves like that due to the time it can take to update it.\n\n\n\n\n\n","category":"method"},{"location":"ref/#Glimmer.FlexUI.variable-Tuple{App, String}","page":"Reference","title":"Glimmer.FlexUI.variable","text":"variable(app::App, name::String)\n\nReturn the variable object or nothing if variable cannot be found in app.    \n\n\n\n\n\n","category":"method"},{"location":"ref/#UI-Variables-(Glimmer.UIVariables)","page":"Reference","title":"UI Variables (Glimmer.UIVariables)","text":"","category":"section"},{"location":"ref/","page":"Reference","title":"Reference","text":"Modules = [Glimmer.UIVariables]","category":"page"},{"location":"ref/#Glimmer.UIVariables.addGridColumn!-Tuple{Variable, Dict}","page":"Reference","title":"Glimmer.UIVariables.addGridColumn!","text":"addGridColumn!(var::Variable, colDef::Dict)\n\nAdd a new grid column definition as the last column.\n\n\n\n\n\n","category":"method"},{"location":"ref/#Glimmer.UIVariables.clearGridColumns!-Tuple{Variable}","page":"Reference","title":"Glimmer.UIVariables.clearGridColumns!","text":"clearGridColumns!(var::Variable)\n\nClear all existing definitions of columns for this var grid.    \n\n\n\n\n\n","category":"method"},{"location":"ref/#Glimmer.UIVariables.emit","page":"Reference","title":"Glimmer.UIVariables.emit","text":"on(func::Function, var::AbstractUIVariable, event::Symbol = :valueChanged)\n\nEmits the specific event on a variable, calling all the listeners.    \n\n\n\n\n\n","category":"function"},{"location":"ref/#Glimmer.UIVariables.forEachGridColumn!-Tuple{Variable, String, Any}","page":"Reference","title":"Glimmer.UIVariables.forEachGridColumn!","text":"forEachGridColumn!(var::Variable, option::String, value)\n\nSet a column options for each exiting column definition in this grid variable.\n\n\n\n\n\n","category":"method"},{"location":"ref/#Glimmer.UIVariables.gridColumnOption!-Tuple{Variable, String, String, Any}","page":"Reference","title":"Glimmer.UIVariables.gridColumnOption!","text":"gridColumnOption!(var::Variable, colName::String, option::String, value)\n\nSet a grid column's option.\n\n\n\n\n\n","category":"method"},{"location":"ref/#Glimmer.UIVariables.gridDefaultColDef!-Tuple{Variable, Dict}","page":"Reference","title":"Glimmer.UIVariables.gridDefaultColDef!","text":"gridDefaultColDef!(var::Variable, colDef::Dict)\n\nSet the default column definition for this grid variable.\n\n\n\n\n\n","category":"method"},{"location":"ref/#Glimmer.UIVariables.gridOption!-Tuple{Variable, String, Any}","page":"Reference","title":"Glimmer.UIVariables.gridOption!","text":"gridOption!(var::Variable, option::String, value)\n\nSet a grid options.\n\n\n\n\n\n","category":"method"},{"location":"ref/#Glimmer.UIVariables.insertGridColumn!-Tuple{Variable, Int64, Dict}","page":"Reference","title":"Glimmer.UIVariables.insertGridColumn!","text":"addGridColumn!(var::Variable, colDef::Dict)\n\nAdd a new grid column definition as the last column.\n\n\n\n\n\n","category":"method"},{"location":"ref/#Glimmer.UIVariables.on","page":"Reference","title":"Glimmer.UIVariables.on","text":"on(func::Function, var::AbstractUIVariable, event::Symbol = :valueChanged)\n\nAdds function func as listener to the variable. Whenever variables's value is set via var[] = val or one of  the defined UI Controls, func is called with val. Most variables have just one type of events associated with them: valueChanged. But some, such as 'aggrid' have additional events that you can bind listeners to.\n\n\n\n\n\n","category":"function"},{"location":"ref/#Glimmer.UIVariables.rawValue-Tuple{Variable}","page":"Reference","title":"Glimmer.UIVariables.rawValue","text":"rawValue(var::Variable) -> string\n\nreturns the internal value of the variable. in most cases this value would be identical to using var[], but in  some cases, such as aggrid type variable, this would return the internal structure of the grid definition, allowing the user  to manually manipulate it for better control on the grid behevior.\n\n\n\n\n\n","category":"method"},{"location":"ref/#Grid-Utilities-(Glimmer.GridUtils)","page":"Reference","title":"Grid Utilities (Glimmer.GridUtils)","text":"","category":"section"},{"location":"ref/","page":"Reference","title":"Reference","text":"Modules = [Glimmer.GridUtils]","category":"page"},{"location":"ref/#Glimmer.GridUtils.getTypes-Tuple{Any, Vector{Any}}","page":"Reference","title":"Glimmer.GridUtils.getTypes","text":"getTypes(m::Any, arr::Vector{Any})\n\nThis function has no place in this package and is just a utility function that fills an array with information of types in the given module. The function is here in order to test the agGrid tree view capabilities but it has nothing to do with UI or Visualization.    \n\n\n\n\n\n","category":"method"},{"location":"ref/#Glimmer.GridUtils.table2agGrid-Tuple{Any}","page":"Reference","title":"Glimmer.GridUtils.table2agGrid","text":"table2agGrid(table)\n\nTakes a Tables.jl compatable table and return the agGrid represantation of it with default colDefs.\n\n\n\n\n\n","category":"method"},{"location":"ref/#Glimmer.GridUtils.table2agGridTree-Tuple{Any, String, String}","page":"Reference","title":"Glimmer.GridUtils.table2agGridTree","text":"table2agGridTree(table, id::String, parentId::String)\n\nTakes a Tables.jl compatable table and return the agGrid represantation of it with default colDefs. The table data is assumed to represent an hericical data structure where the id parameter is the field containing a unique id, and the parentId parameter is the field containing the parent id of the specific row.\n\n\n\n\n\n","category":"method"},{"location":"ref/#Glimmer.GridUtils.toJSONTable","page":"Reference","title":"Glimmer.GridUtils.toJSONTable","text":"toJSONTable(data::Vector{Any}, parent_id::Int64 = -1)\n\nUtility function to convert the result of getTypes in to a JSON table (Tables.jl compatiable data structure)\n\n\n\n\n\n","category":"function"},{"location":"ref/#INTERNAL:-Julia-to-JavaScript-Bridge-(Glimmer.JuliaJSBridge)","page":"Reference","title":"INTERNAL: Julia to JavaScript Bridge (Glimmer.JuliaJSBridge)","text":"","category":"section"},{"location":"ref/","page":"Reference","title":"Reference","text":"Modules = [Glimmer.JuliaJSBridge]","category":"page"},{"location":"ref/#Glimmer.JuliaJSBridge.JS_loader_node-Tuple","page":"Reference","title":"Glimmer.JuliaJSBridge.JS_loader_node","text":"JS_loader_node(filenames...)\n\nReturn a WebIO.Node object that contains all the supplied files as children nodes. Recognized extentions files such as '.js' and '.css' are contains in a :script and :style nodes respectivly.\n\n\n\n\n\n","category":"method"},{"location":"ref/#Glimmer.JuliaJSBridge.fixMaterialIConsStyles-Tuple{String}","page":"Reference","title":"Glimmer.JuliaJSBridge.fixMaterialIConsStyles","text":"Fixing the path in the styles file for the MaterialIcons font for Blink to load locally from the dist directory\n\n\n\n\n\n","category":"method"},{"location":"#Glimmer.jl","page":"Home","title":"Glimmer.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Glimmer.jl is a Julia package for creating fast and simple user interface (UI) using the Blink package. The UI is a dynamic Angular application that runs inside a Blink window.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is designed to allow any Julia user to easily create simple UIs, perform quick code experiments where you can tweak the inputs, and visualize the results in the same window. You can update variable values using the interactive controls or using Julia assinments in the REPL or scripts, and Glimmer will make sure everything is synchronized. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Glimmer Example)","category":"page"},{"location":"#Basic-usage:","page":"Home","title":"Basic usage:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Glimmer\n\njulia> Glimmer.runExample(\"Controls\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Controls Example)","category":"page"}]
}
